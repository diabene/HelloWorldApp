name: Creating Installer with NSIS
on:
  push:
    branches:
      - 'master'

#  create:
#    tag:
#      - '*'

jobs:
  create_installer:
    name: Create Installer
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        #checkout code
        uses: actions/checkout@v3
        #Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Download Necessary Files for JRE
        run: |
          curl -o jmods.zip https://download2.gluonhq.com/openjfx/20.0.1/openjfx-20.0.1_windows-x64_bin-jmods.zip
          Expand-Archive -Path jmods.zip -DestinationPath .
          curl -o jmods-sdk.zip https://download2.gluonhq.com/openjfx/20.0.2/openjfx-20.0.2_windows-x64_bin-sdk.zip
          Expand-Archive -Path jmods-sdk.zip -DestinationPath .
        shell: pwsh

      - name: Create JAR File
        run: |
          mvn clean
          mvn package
        shell: pwsh
#          mvn -B package -DskipTests --file pom.xml

      - name: Create JRE
        run: |
          jlink --module-path ".\javafx-jmods-20.0.1;.\javafx-sdk-20.0.2\lib;$env:JAVA_HOME\jmods" --add-modules java.base,java.desktop,java.scripting,java.xml,javafx.base,javafx.controls,javafx.graphics,javafx.media,jdk.jsobject,jdk.xml.dom,javafx.fxml --output jre-14.0.2 --strip-debug --compress 2 --no-header-files --no-man-pages
          dir
          dir target
          dir jre-14.0.2
        shell: pwsh

#      - name: Run NSIS script
#        uses: joncloud/makensis-action@v4
#        with:
#            script-file: "install.nsi"

      - name: Run NSIS Script
        uses: repolevedavaj/install-nsis@v1
        with:
          nsis-version: 3.0.4.1

      - name: Check directory for exe file
        run: |
          dir
        shell: pwsh

      - name: Extract Tag Name
        if: startsWith(github.ref, 'refs/tags')
        id: extract_tag
        uses: dawidd6/action-get-tag@v1
        with:
          # Optionally strip `v` prefix
          strip_v: true

      - name: Check Tag Extraction
        if: startsWith(github.ref, 'refs/tags')
        run: |
          $tag = '${{ steps.extract_tag.outputs.tag }}'
          echo "Tag: $tag"

#      - name: Create Release
#        if: startsWith(github.ref, 'refs/tags')
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_EXE }}
#        with:
#          tag_name: v${{ steps.extract_tag.outputs.tag }} # Specify the desired tag name
#          release_name: Release v${{ steps.extract_tag.outputs.tag }}  # Specify the desired release name
#          body: |
#            Release v${{ steps.extract_tag.outputs.tag }}
#          draft: false
#          prerelease: false
#
#      - name: Attach Artifact to Release
#        if: startsWith(github.ref, 'refs/tags')
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_EXE }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: .\HelloWorldApp.exe
#          asset_name: HelloWorldApp-${{ steps.extract_tag.outputs.tag }}.exe
#          asset_content_type: application/octet-stream
